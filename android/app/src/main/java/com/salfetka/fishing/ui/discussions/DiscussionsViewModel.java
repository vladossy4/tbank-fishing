package com.salfetka.fishing.ui.discussions;


import android.content.ClipData;
import android.content.ClipboardManager;

import androidx.databinding.ObservableArrayList;
import androidx.databinding.ObservableList;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import com.salfetka.fishing.models.discussions.Message;

import java.util.GregorianCalendar;
import java.util.HashSet;

/** –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–µ—Ä–µ–ø–∏—Å–∫–∞—Ö */
public class DiscussionsViewModel extends ViewModel {
    private final MutableLiveData<ObservableList<Message>> messages = new MutableLiveData<>();

    public DiscussionsViewModel() {
        ObservableArrayList<Message> exampleMessages = new ObservableArrayList<>();
        exampleMessages.add(new Message(new GregorianCalendar(2023, 10, 19, 10, 15),"User1", "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ"));
        exampleMessages.add(new Message(new GregorianCalendar(2024, 2, 7, 12, 21),"User1", "–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ"));
        exampleMessages.add(new Message(new GregorianCalendar(2024, 2, 7, 12, 22),"XxxxX", "Xxxxxx xxxxxxxxx x xxxx"));
        exampleMessages.add(new Message(new GregorianCalendar(2024, 4, 30, 22, 55),"User2", "–ü—Ä–æ—Å—Ç–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :) :) :)"));
        exampleMessages.add(new Message(new GregorianCalendar(2024, 5, 2, 11, 9),"User3", "üòäüòäüòäüëåüòé"));
        exampleMessages.add(new Message(new GregorianCalendar(2024, 5, 19, 15, 17),"User1", "üòäüòäüòäüëåüòé"));
        exampleMessages.add(new Message(new GregorianCalendar(2024, 5, 19, 19, 45),"User2", "–ü–µ—á–∞—Ç–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π: –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ –∞–∞–∞ –∞–∞ –∞–∞ –∞–∞ –∞–∞ –∞–∞  –∞–∞–∞"));
        messages.setValue(exampleMessages);
    }

    public MutableLiveData<ObservableList<Message>> getMessages() {
        return messages;
    }

    /** –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param message —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*/
    public void sendMessage(String message){
        if (messages.getValue() != null) {
            messages.getValue().add(new Message(new GregorianCalendar(), "Slava", message));
        }
    }

    public void copyMessages(HashSet<Integer> selectedMessages, ClipboardManager clipboardManager){
        StringBuilder allSelected = new StringBuilder();
        selectedMessages.forEach( i -> {
            allSelected.append(messages.getValue().get(i).getMessage()).append("\n");
        });
        ClipData clip = ClipData.newPlainText("", allSelected);
        clipboardManager.setPrimaryClip(clip);
    }
}